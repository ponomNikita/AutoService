@using System.Web.Configuration
@using AutoService.DAL.Models
@using AutoService.Services
@using AutoService.Enums
@using AutoService.Services.Enums
@using AutoService.Services.Interfaces
@using Roles = AutoService.Services.Enums.Roles
@model AutoService.Services.ViewModels.ApplicationEdit
@{
    IPermissionService permissionService = ServicesFactory.CreatePermissionService();
    IAccountService accountService = ServicesFactory.CreateAccountService(User);

    var timepickerStep = WebConfigurationManager.AppSettings["scheduleStep"];
    var timepickerStartTime = WebConfigurationManager.AppSettings["scheduleStartTime"];
    var timepickerEndTime = WebConfigurationManager.AppSettings["scheduleEndTime"];

    bool IsEdit = Model.Id != 0;
    bool isAdmin = permissionService.HasRole((int) Roles.Admin, User.Identity.Name);
    bool isApproved = Model.IsApproved;

    string formMethod = IsEdit ? "Edit" : "Create";
    var client = accountService.GetUserByLogin(Model.CreatedBy);

    List<SelectListItem> SelectListItems = new List<SelectListItem>()
    {
        new SelectListItem { Text = (ApplicationStatus.WaitForApprove).Description(), Value = ((int)ApplicationStatus.WaitForApprove).ToString() },
        new SelectListItem { Text = (ApplicationStatus.WaitForDiagnostic).Description(), Value = ((int)ApplicationStatus.WaitForDiagnostic).ToString() },
        new SelectListItem { Text = (ApplicationStatus.WaitForReparing).Description(), Value = ((int)ApplicationStatus.WaitForReparing).ToString() },
        new SelectListItem { Text = (ApplicationStatus.WaitForSupply).Description(), Value = ((int)ApplicationStatus.WaitForSupply).ToString() },
        new SelectListItem { Text = (ApplicationStatus.Reparing).Description(), Value = ((int)ApplicationStatus.Reparing).ToString() },
        new SelectListItem { Text = (ApplicationStatus.Done).Description(), Value = ((int)ApplicationStatus.Done).ToString() },
    };

    IEnumerable<SelectListItem> SelectList = new SelectList(SelectListItems, "Value", "Text", Model.Status);

    ViewData.Add(new KeyValuePair<string, object>("IsAdmin", isAdmin));
}
<script>
    $(document)
        .ready(function () {
            if ('@isAdmin' === 'True' || '@isApproved' === 'True') {
                $("#Car_Model").prop('readonly', true);
                $("#Car_Number").prop('readonly', true);
                $("#timepicker").prop('readonly', true);
                $("#datepicker").prop('readonly', true);
                $("#Note").prop('readonly', true);

                $("#ClientName").prop('readonly', true);
                $("#ClientPhoneNumber").prop('readonly', true);
                $("#ClientEmail").prop('readonly', true);
                $("#ClientAddress").prop('readonly', true);
                $('#datepicker').datepicker("destroy");

                //Отключаем валидацию на форме
                $('#createApplicationForm').validate({
                    ignore: "#createApplicationForm"
                });
            }
            else {
                configureTimePicker(@timepickerStep, '@timepickerStartTime', '@timepickerEndTime');
                $('.datepicker').removeAttr("data-val-date");
                $('.Date').attr("value", "");
            }

            $('select').on('change', function (e) {
                var valueSelected = this.value;
                $("#Status").prop("value", valueSelected);
            });
        });
</script>
<div class="custom-form-group">
    <div class="row">
        <div class="col-md-offset-4 col-lg-offset-4 col-sm-offset-3 col-xs-offset-2">
            <h2>@ViewBag.Title</h2><br />
        </div>
    </div>
    <div class="row">
        <div class="col-md-offset-2 col-lg-offset-2 col-sm-offset-2 col-xs-offset-1">
            @Html.ValidationSummary(true)
        </div>
    </div>
    @using (Html.BeginForm(formMethod, "Application", new { returnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form", id = "createApplicationForm" }))
    {
        @Html.HiddenFor(m => m.RequestType)
        @Html.HiddenFor(m => m.Status)
        @Html.HiddenFor(m => m.IsApproved)
        @Html.HiddenFor(m => m.isCreate)
        <div class="container">
            <div class="row">
                <div class="form-group">
                    @Html.LabelFor(m => m.Car.Model, new { @class = "control-label required" })
                    @Html.TextBoxFor(m => m.Car.Model, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Car.Model)
                </div>
            </div>
            <div class="row">
                <div class="form-group">
                    @Html.LabelFor(m => m.Car.RegNumber, new { @class = "control-label required" })
                    @Html.TextBoxFor(m => m.Car.RegNumber, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Car.RegNumber)
                </div>
            </div>
            <div class="row">
                <div class="form-group">
                    @Html.LabelFor(m => m.Car.Year, new { @class = "control-label required" })
                    @Html.TextBoxFor(m => m.Car.Year, "{0:yyyy}", new { @class = "form-control yearpicker" })
                    @Html.ValidationMessageFor(m => m.Car.Year)
                </div>
            </div>
            <div class="row">
                <div class="form-group">
                    @Html.LabelFor(m => m.Date, new { @class = "control-label required" })
                    @Html.TextBoxFor(m => m.Date, "{0:dd/MM/yyyy}", new { @class = "form-control datepicker" })
                    @Html.ValidationMessageFor(m => m.Date)
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Time, new { @class = "control-label required" })
                    @Html.TextBoxFor(m => m.Time, new { @class = "form-control timepicker"})
                    @Html.ValidationMessageFor(m => m.Time)
                </div>
            </div>
            <div class="row">
                <div class="form-group">
                    @Html.LabelFor(m => m.Note, new { @class = "control-label" })
                    @Html.TextAreaFor(m => m.Note, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Note)
                </div>
            </div>

            @if (isAdmin)
            {
                @Html.HiddenFor(m => m.Status)
                <div class="row">
                    <div class="form-group">
                        @Html.LabelFor(m => m.Status, new { @class = "control-label" })
                        @Html.DropDownList("SelectStatus", SelectList as SelectList, new { @class = "form-control" })
                    </div>
                </div>
            }

            @if (isAdmin && client != null)
            {
                <div class="col-md-offset-4 col-lg-offset-4 col-sm-offset-3 col-xs-offset-2">
                    <h3>Информация о клиенте</h3>
                </div>
                <div class="form-group">
                    @Html.Label("ClientName", "Имя", new { @class = "control-label" })
                    @Html.TextBox("ClientName", client.GetFullName(), new { @class = "form-control" })
                </div>
                <div class="form-group">
                    @Html.Label("ClientPhoneNumber", "Телефон", new { @class = "control-label" })
                    @Html.TextBox("ClientPhoneNumber", client.PhoneNumber, new { @class = "form-control" })
                </div>
                <div class="form-group">
                    @Html.Label("ClientEmail", "Email", new { @class = "control-label" })
                    @Html.TextBox("ClientEmail", client.Email, new { @class = "form-control" })
                </div>
                <div class="form-group">
                    @Html.Label("ClientAddress", "Адрес", new { @class = "control-label" })
                    @Html.TextArea("ClientAddress", client.Address, new { @class = "form-control" })
                </div>
            }



            @if (isAdmin || !isApproved)
            {
                <div class="row">
                    <button type="submit" class="btn btn-primary col-lg-1 col-lg-offset-4 col-md-1 col-md-offset-4 col-sm-2 col-sm-offset-2 col-xs-3 col-xs-offset-2">Сохранить</button>
                    <a href="~/" class="btn btn-default col-md-1 col-lg-1 col-xs-3 col-sm-2" role="button">Отмена</a>
                </div>
            }
        </div>
    }
</div>
    @if (IsEdit && (Model.CoordinationRequests != null && Model.CoordinationRequests.Any() || isAdmin))
    {
        <div class="custom-form-group">
            @if (Model.CoordinationRequests != null && Model.CoordinationRequests.Any())
            {
            @Html.Partial("CoordinationTickets", Model, ViewData)
            }

            @if (isAdmin)
            {
            @Html.Partial("CreateCoordinationRequest", Model)
            }
        </div>

    }

